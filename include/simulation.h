/**
 * yosys-cgploss - Create circuics using Genetic (CGP)
 * file with simulation data type header
 * @author Lukas Plevac <xpleva07@vutbr.cz>
 */

#pragma once
//https://codeforces.com/blog/entry/96344
//https://codeforces.com/blog/entry/66279
//https://faculty.cc.gatech.edu/~echow/ipcc/hpc-course/08_simd.pdf

#define SIM_BYTES_COUNT 32
#define ONE_SIM_VARIANTS 8

//constant for variants variants generation
#define VARIANTS_BITS_A    {0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55}
#define VARIANTS_BITS_B    {0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33}
#define VARIANTS_BITS_C    {0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F}
#define VARIANTS_BITS_D    {0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF}
#define VARIANTS_BITS_E    {0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF}
#define VARIANTS_BITS_F    {0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF}
#define VARIANTS_BITS_G    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}
#define VARIANTS_BITS_H    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}
#define VARIANTS_BITS_ALL0 {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

//macro for set variant to vector by variant index
#define SET_VARIANTS_BITS(VEC, X) { \
	if      (X == 0) SET_VECTOR_TO(VEC, VARIANTS_BITS_A) \
	else if (X == 1) SET_VECTOR_TO(VEC, VARIANTS_BITS_B) \
	else if (X == 2) SET_VECTOR_TO(VEC, VARIANTS_BITS_C) \
	else if (X == 3) SET_VECTOR_TO(VEC, VARIANTS_BITS_D) \
	else if (X == 4) SET_VECTOR_TO(VEC, VARIANTS_BITS_E) \
	else if (X == 5) SET_VECTOR_TO(VEC, VARIANTS_BITS_F) \
	else if (X == 6) SET_VECTOR_TO(VEC, VARIANTS_BITS_G) \
	else if (X == 7) SET_VECTOR_TO(VEC, VARIANTS_BITS_H) \
	else SET_VECTOR_TO(VEC, VARIANTS_BITS_ALL0) \
}

#define SET_VECTOR_TO(VEC, X) { \
	simulation::io_vector_t tmp = X; \
	VEC = tmp;\
}

#include <inttypes.h>
#include <vector>

#include "kernel/yosys.h"
#include "kernel/sigtools.h"

#include "genome.h"
#include "config-parse.h"

namespace simulation {
	typedef uint8_t io_vector_t __attribute__ ((vector_size(SIM_BYTES_COUNT)));

	union io_t {
		io_vector_t vec;
		uint8_t byte[SIM_BYTES_COUNT];
	};

	/**
	 * @brief Get number of one bits in vector
	 * @param vec vestor for operatiom
	 * @return unsigned count of bits
	 */
	unsigned bits_count(io_t vec);

	/**
	 * @brief Return maximal error per one variant
	 * 
	 * @param xor_outputs xor between reference and individual output
	 * @param rtl_ports  map between chromozome index and RTLIL SigBit
	 * @param config_parse config parser with port weights
	 * @return unsigned maximal error
	 */
	unsigned one_max_loss(std::vector<io_t> xor_outputs, std::map<genome::io_id_t, Yosys::RTLIL::SigBit> rtl_ports, config::parse *config_parse);

}